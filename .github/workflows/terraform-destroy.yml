name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type 'destroy' to confirm"
        required: true
        default: ""

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  TF_CLI_ARGS_init: -no-color
  TF_CLI_ARGS_destroy: -no-color -auto-approve
  # Visible, easy-to-edit variables
  AWS_REGION: us-east-1 # change as needed
  TF_STATE_BUCKET: aws-basics-labs-tf-state # change as needed
  TF_STATE_KEY: aws-basics-labs/dev/terraform.tfstate # change as needed
  TF_STATE_LOCK_TABLE: aws-basics-labs-tf-locks # change as needed

jobs:
  destroy:
    if: github.event.inputs.confirm == 'destroy'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::575960430633:role/GitHubActionsDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Show config
        run: |
          echo "AWS_REGION=$AWS_REGION"
          echo "TF_STATE_BUCKET=$TF_STATE_BUCKET"
          echo "TF_STATE_KEY=$TF_STATE_KEY"
          echo "TF_STATE_LOCK_TABLE=$TF_STATE_LOCK_TABLE"

      - name: Ensure S3 state bucket exists
        shell: bash
        run: |
          set -euo pipefail
          if aws s3api head-bucket --bucket "$TF_STATE_BUCKET" 2>/dev/null; then
            echo "State bucket exists: $TF_STATE_BUCKET"
          else
            echo "Creating state bucket: $TF_STATE_BUCKET in $AWS_REGION"
            if [ "$AWS_REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$TF_STATE_BUCKET"
            else
              aws s3api create-bucket --bucket "$TF_STATE_BUCKET" \
                --create-bucket-configuration LocationConstraint="$AWS_REGION"
            fi
            aws s3api put-bucket-versioning --bucket "$TF_STATE_BUCKET" \
              --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "$TF_STATE_BUCKET" \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          fi

      - name: Ensure DynamoDB lock table exists
        shell: bash
        run: |
          set -euo pipefail
          if aws dynamodb describe-table --table-name "$TF_STATE_LOCK_TABLE" >/dev/null 2>&1; then
            echo "Lock table exists: $TF_STATE_LOCK_TABLE"
          else
            echo "Creating lock table: $TF_STATE_LOCK_TABLE"
            aws dynamodb create-table \
              --table-name "$TF_STATE_LOCK_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            aws dynamodb wait table-exists --table-name "$TF_STATE_LOCK_TABLE"
          fi

      - name: Terraform Init (S3 backend)
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_LOCK_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Destroy
        run: terraform destroy -auto-approve